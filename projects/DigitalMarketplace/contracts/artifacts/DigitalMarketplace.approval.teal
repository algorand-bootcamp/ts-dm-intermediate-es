#pragma version 10

// This TEAL was generated by TEALScript v0.94.1
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// allowAsset(pay,uint64)void
*abi_route_allowAsset:
	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// mbrPay: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 1 (mbrPay) for allowAsset must be a pay transaction
	assert

	// execute allowAsset(pay,uint64)void
	callsub allowAsset
	int 1
	return

// allowAsset(mbrPay: PayTxn, asset: AssetID): void
allowAsset:
	proto 2 0

	// contracts/DigitalMarketplace.algo.ts:10
	// assert(!this.app.address.isOptedInToAsset(asset))
	global CurrentApplicationAddress
	frame_dig -2 // asset: AssetID
	asset_holding_get AssetBalance
	swap
	pop
	!
	assert

	// contracts/DigitalMarketplace.algo.ts:12
	// verifyTxn(mbrPay, {
	//       receiver: this.app.address,
	//       amount: globals.assetOptInMinBalance,
	//     })
	// verify receiver
	frame_dig -1 // mbrPay: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrPay","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrPay: PayTxn
	gtxns Amount
	global AssetOptInMinBalance
	==

	// transaction verification failed: {"txn":"mbrPay","field":"amount","expected":"globals.assetOptInMinBalance"}
	assert

	// contracts/DigitalMarketplace.algo.ts:17
	// sendAssetTransfer({
	//       xferAsset: asset,
	//       assetAmount: 0,
	//       assetReceiver: this.app.address,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/DigitalMarketplace.algo.ts:18
	// xferAsset: asset
	frame_dig -2 // asset: AssetID
	itxn_field XferAsset

	// contracts/DigitalMarketplace.algo.ts:19
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/DigitalMarketplace.algo.ts:20
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// firstDeposit(pay,axfer,uint64)void
*abi_route_firstDeposit:
	// unitaryPrice: uint64
	txna ApplicationArgs 1
	btoi

	// xfer: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 1 (xfer) for firstDeposit must be a axfer transaction
	assert

	// mbrPay: pay
	txn GroupIndex
	int 2
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 2 (mbrPay) for firstDeposit must be a pay transaction
	assert

	// execute firstDeposit(pay,axfer,uint64)void
	callsub firstDeposit
	int 1
	return

// firstDeposit(mbrPay: PayTxn, xfer: AssetTransferTxn, unitaryPrice: uint64): void
firstDeposit:
	proto 3 0

	// contracts/DigitalMarketplace.algo.ts:34
	// assert(!this.forSaleBoard({ owner: this.txn.sender, asa: xfer.xferAsset.id }).exists)
	txn Sender
	frame_dig -2 // xfer: AssetTransferTxn
	gtxns XferAsset
	itob
	concat
	box_len
	swap
	pop
	!
	assert

	// contracts/DigitalMarketplace.algo.ts:40
	// verifyPayTxn(mbrPay, {
	//       sender: this.txn.sender,
	//       receiver: this.app.address,
	//       amount: forSaleMBR,
	//     })
	// verify sender
	frame_dig -1 // mbrPay: PayTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"mbrPay","field":"sender","expected":"this.txn.sender"}
	assert

	// verify receiver
	frame_dig -1 // mbrPay: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrPay","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrPay: PayTxn
	gtxns Amount
	int 24900
	==

	// transaction verification failed: {"txn":"mbrPay","field":"amount","expected":"forSaleMBR"}
	assert

	// contracts/DigitalMarketplace.algo.ts:46
	// verifyAssetTransferTxn(xfer, {
	//       sender: this.txn.sender,
	//       assetReceiver: this.app.address,
	//       assetAmount: { greaterThan: 0 },
	//     })
	// verify sender
	frame_dig -2 // xfer: AssetTransferTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"xfer","field":"sender","expected":"this.txn.sender"}
	assert

	// verify assetReceiver
	frame_dig -2 // xfer: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"xfer","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify assetAmount
	frame_dig -2 // xfer: AssetTransferTxn
	gtxns AssetAmount
	int 0
	>

	// transaction verification failed: {"txn":"xfer","field":"assetAmount","condition":"greaterThan","expected":">0"}
	assert

	// contracts/DigitalMarketplace.algo.ts:52
	// this.forSaleBoard({ owner: this.txn.sender, asa: xfer.xferAsset.id }).value = {
	//       deposited: xfer.assetAmount,
	//       unitaryPrice: unitaryPrice,
	//     }
	txn Sender
	frame_dig -2 // xfer: AssetTransferTxn
	gtxns XferAsset
	itob
	concat
	frame_dig -2 // xfer: AssetTransferTxn
	gtxns AssetAmount
	itob
	frame_dig -3 // unitaryPrice: uint64
	itob
	concat
	box_put
	retsub

// deposit(axfer)void
*abi_route_deposit:
	// xfer: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==

	// argument 0 (xfer) for deposit must be a axfer transaction
	assert

	// execute deposit(axfer)void
	callsub deposit
	int 1
	return

// deposit(xfer: AssetTransferTxn): void
deposit:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts/DigitalMarketplace.algo.ts:60
	// assert(this.forSaleBoard({ owner: this.txn.sender, asa: xfer.xferAsset.id }).exists)
	txn Sender
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns XferAsset
	itob
	concat
	box_len
	swap
	pop
	assert

	// contracts/DigitalMarketplace.algo.ts:62
	// verifyAssetTransferTxn(xfer, {
	//       sender: this.txn.sender,
	//       assetReceiver: this.app.address,
	//       assetAmount: { greaterThan: 0 },
	//     })
	// verify sender
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"xfer","field":"sender","expected":"this.txn.sender"}
	assert

	// verify assetReceiver
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"xfer","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify assetAmount
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns AssetAmount
	int 0
	>

	// transaction verification failed: {"txn":"xfer","field":"assetAmount","condition":"greaterThan","expected":">0"}
	assert

	// contracts/DigitalMarketplace.algo.ts:68
	// currentBalance = this.forSaleBoard({ owner: this.txn.sender, asa: xfer.xferAsset.id }).value.deposited
	int 0
	int 8
	txn Sender
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns XferAsset
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // currentBalance: uint64

	// contracts/DigitalMarketplace.algo.ts:69
	// currentPrice = this.forSaleBoard({ owner: this.txn.sender, asa: xfer.xferAsset.id }).value.unitaryPrice
	int 8 // headOffset
	int 8
	txn Sender
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns XferAsset
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 1 // currentPrice: uint64

	// contracts/DigitalMarketplace.algo.ts:71
	// this.forSaleBoard({ owner: this.txn.sender, asa: xfer.xferAsset.id }).value = {
	//       deposited: currentBalance + xfer.assetAmount,
	//       unitaryPrice: currentPrice,
	//     }
	txn Sender
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns XferAsset
	itob
	concat
	frame_dig 0 // currentBalance: uint64
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns AssetAmount
	+
	itob
	frame_dig 1 // currentPrice: uint64
	itob
	concat
	box_put
	retsub

// setPrice(uint64,uint64)void
*abi_route_setPrice:
	// newPrice: uint64
	txna ApplicationArgs 2
	btoi

	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute setPrice(uint64,uint64)void
	callsub setPrice
	int 1
	return

// setPrice(asset: uint64, newPrice: uint64): void
setPrice:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/DigitalMarketplace.algo.ts:79
	// assert(this.forSaleBoard({ owner: this.txn.sender, asa: asset }).exists)
	txn Sender
	frame_dig -1 // asset: uint64
	itob
	concat
	box_len
	swap
	pop
	assert

	// contracts/DigitalMarketplace.algo.ts:81
	// currentDeposit = this.forSaleBoard({ owner: this.txn.sender, asa: asset }).value.deposited
	int 0
	int 8
	txn Sender
	frame_dig -1 // asset: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // currentDeposit: uint64

	// contracts/DigitalMarketplace.algo.ts:83
	// this.forSaleBoard({ owner: this.txn.sender, asa: asset }).value = {
	//       deposited: currentDeposit,
	//       unitaryPrice: newPrice,
	//     }
	txn Sender
	frame_dig -1 // asset: uint64
	itob
	concat
	frame_dig 0 // currentDeposit: uint64
	itob
	frame_dig -2 // newPrice: uint64
	itob
	concat
	box_put
	retsub

// buy(address,uint64,pay,uint64)void
*abi_route_buy:
	// quantity: uint64
	txna ApplicationArgs 3
	btoi

	// buyPay: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 1 (buyPay) for buy must be a pay transaction
	assert

	// asset: uint64
	txna ApplicationArgs 2
	btoi

	// owner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 3 (owner) for buy must be a address
	assert

	// execute buy(address,uint64,pay,uint64)void
	callsub buy
	int 1
	return

// buy(owner: Address, asset: AssetID, buyPay: PayTxn, quantity: uint64): void
buy:
	proto 4 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// contracts/DigitalMarketplace.algo.ts:91
	// currentPrice = this.forSaleBoard({ owner: owner, asa: asset.id }).value.unitaryPrice
	int 8 // headOffset
	int 8
	frame_dig -1 // owner: Address
	frame_dig -2 // asset: AssetID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // currentPrice: uint64

	// contracts/DigitalMarketplace.algo.ts:92
	// currentDeposit = this.forSaleBoard({ owner: owner, asa: asset.id }).value.deposited
	int 0
	int 8
	frame_dig -1 // owner: Address
	frame_dig -2 // asset: AssetID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 1 // currentDeposit: uint64

	// contracts/DigitalMarketplace.algo.ts:93
	// amountToBePaid = currentPrice * quantity
	frame_dig 0 // currentPrice: uint64
	frame_dig -4 // quantity: uint64
	*
	frame_bury 2 // amountToBePaid: uint64

	// contracts/DigitalMarketplace.algo.ts:95
	// verifyPayTxn(buyPay, {
	//       sender: this.txn.sender,
	//       receiver: owner,
	//       amount: amountToBePaid,
	//     })
	// verify sender
	frame_dig -3 // buyPay: PayTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"buyPay","field":"sender","expected":"this.txn.sender"}
	assert

	// verify receiver
	frame_dig -3 // buyPay: PayTxn
	gtxns Receiver
	frame_dig -1 // owner: Address
	==

	// transaction verification failed: {"txn":"buyPay","field":"receiver","expected":"owner"}
	assert

	// verify amount
	frame_dig -3 // buyPay: PayTxn
	gtxns Amount
	frame_dig 2 // amountToBePaid: uint64
	==

	// transaction verification failed: {"txn":"buyPay","field":"amount","expected":"amountToBePaid"}
	assert

	// contracts/DigitalMarketplace.algo.ts:101
	// sendAssetTransfer({
	//       xferAsset: asset,
	//       assetReceiver: this.txn.sender,
	//       assetAmount: quantity,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/DigitalMarketplace.algo.ts:102
	// xferAsset: asset
	frame_dig -2 // asset: AssetID
	itxn_field XferAsset

	// contracts/DigitalMarketplace.algo.ts:103
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/DigitalMarketplace.algo.ts:104
	// assetAmount: quantity
	frame_dig -4 // quantity: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/DigitalMarketplace.algo.ts:107
	// this.forSaleBoard({ owner: owner, asa: asset.id }).value = {
	//       deposited: currentDeposit - quantity,
	//       unitaryPrice: currentPrice,
	//     }
	frame_dig -1 // owner: Address
	frame_dig -2 // asset: AssetID
	itob
	concat
	frame_dig 1 // currentDeposit: uint64
	frame_dig -4 // quantity: uint64
	-
	itob
	frame_dig 0 // currentPrice: uint64
	itob
	concat
	box_put
	retsub

// withdraw(uint64)void
*abi_route_withdraw:
	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute withdraw(uint64)void
	callsub withdraw
	int 1
	return

// withdraw(asset: AssetID): void
withdraw:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/DigitalMarketplace.algo.ts:115
	// currentDeposit = this.forSaleBoard({ owner: this.txn.sender, asa: asset.id }).value.deposited
	int 0
	int 8
	txn Sender
	frame_dig -1 // asset: AssetID
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // currentDeposit: uint64

	// contracts/DigitalMarketplace.algo.ts:117
	// sendAssetTransfer({
	//       xferAsset: asset,
	//       assetReceiver: this.txn.sender,
	//       assetAmount: currentDeposit,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/DigitalMarketplace.algo.ts:118
	// xferAsset: asset
	frame_dig -1 // asset: AssetID
	itxn_field XferAsset

	// contracts/DigitalMarketplace.algo.ts:119
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/DigitalMarketplace.algo.ts:120
	// assetAmount: currentDeposit
	frame_dig 0 // currentDeposit: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/DigitalMarketplace.algo.ts:123
	// sendPayment({
	//       receiver: this.txn.sender,
	//       amount: forSaleMBR,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/DigitalMarketplace.algo.ts:124
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/DigitalMarketplace.algo.ts:125
	// amount: forSaleMBR
	int 24900
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*abi_route_createApplication:
	int 1
	return

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "allowAsset(pay,uint64)void"
	method "firstDeposit(pay,axfer,uint64)void"
	method "deposit(axfer)void"
	method "setPrice(uint64,uint64)void"
	method "buy(address,uint64,pay,uint64)void"
	method "withdraw(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_allowAsset *abi_route_firstDeposit *abi_route_deposit *abi_route_setPrice *abi_route_buy *abi_route_withdraw

	// this contract does not implement the given ABI method for call NoOp
	err